name: Run MLOps Pipeline on Data Change

on:
  push:
    paths:
      - '.github/workflows/**'
      - 'data/raw/**'
      - 'scripts/**'
      - 'dvc.yaml'
      - 'dvc.lock'
      - 'requirements.txt'
  workflow_dispatch:

jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      MLFLOW_S3_ENDPOINT_URL: ${{ secrets.MLFLOW_S3_ENDPOINT_URL }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install 'dvc[s3]' awscli mlflow

    - name: Start MinIO server in Docker
      run: |
        docker run -d -p 9000:9000 --name minio \
          -e MINIO_ACCESS_KEY=minio \
          -e MINIO_SECRET_KEY=minio123 \
          minio/minio server /data

        for i in {1..10}; do
          curl --silent --fail http://localhost:9000/minio/health/live && break
          echo "Waiting for MinIO to start..."
          sleep 3
        done

    - name: Create mlflow bucket in MinIO
      run: |
        export AWS_ACCESS_KEY_ID=minio
        export AWS_SECRET_ACCESS_KEY=minio123
        aws --endpoint-url http://localhost:9000 s3 mb s3://mlflow || true

    - name: Start MLflow tracking server
      run: |
        mkdir -p ./mlruns
        nohup mlflow server \
          --backend-store-uri sqlite:///mlflow.db \
          --default-artifact-root ./mlruns \
          --host 0.0.0.0 --port 5000 > mlflow.log 2>&1 &
        sleep 10

    - name: Wait for MLflow to be ready
      run: |
        for i in {1..10}; do
          curl --silent --fail http://localhost:5000/api/2.0/mlflow/experiments/list && break
          echo "Waiting for MLflow..."
          sleep 3
        done

    - name: Set MLflow tracking URI for this job
      run: echo "MLFLOW_TRACKING_URI=http://localhost:5000" >> $GITHUB_ENV

    - name: Configure DVC remote and pull
      run: |
        dvc remote modify minio endpointurl http://localhost:9000
        dvc remote modify minio access_key_id minio
        dvc remote modify minio secret_access_key minio123

    - name: Untrack model.joblib from Git (one-time fix)
      run: |
        if git ls-files --error-unmatch models/model.joblib > /dev/null 2>&1; then
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"
          git rm --cached models/model.joblib
          git commit -m "Untrack model.joblib so DVC can manage it"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
        else
          echo "models/model.joblib is not tracked by Git, skipping untrack step..."
        fi

    - name: Try pulling data, or fall back to repro + push
      run: |
        echo "Trying to pull data from DVC remote..."
        if ! dvc pull; then
          echo "⚠️ DVC pull failed — attempting to regenerate pipeline outputs..."
          dvc repro
          dvc push
        fi

    - name: Run pipeline
      run: |
        dvc repro

    - name: Push results
      run: |
        dvc push